type BitcoinNetwork = variant { mainnet; regtest; testnet };
type EtchingArgs = record {
  cap : nat;
  height : opt record { nat64; nat64 };
  turbo : bool;
  premine : nat;
  rune : text;
  divisibility : nat8;
  offset : opt record { nat64; nat64 };
  fee_rate : opt nat64;
  amount : nat;
  symbol : nat32;
};
type InitArgs = record {
  network : BitcoinNetwork;
  ckbtc_minter : principal;
  ckbtc_ledger : principal;
  timer_for_reveal_txn : nat32;
};
type MintArgs = record {
  dst : text;
  fee_rate : opt nat64;
  amount : nat64;
  rune_id : RuneMintId;
};
type Outpoint = record { txid : blob; vout : nat32 };
type PublicKeyReply = record { public_key_hex : text };
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : PublicKeyReply; Err : text };
type Result_2 = variant { Ok : SignatureReply; Err : text };
type RuneMintId = record { tx : nat32; block : nat64 };
type SignatureReply = record { message : text; signature_hex : text };
type Utxo = record { height : nat32; value : nat64; outpoint : Outpoint };
service : (InitArgs) -> {
  confirm_and_convert_ckbtc : () -> (nat64);
  estimate_etching_fee : (EtchingArgs) -> (text, text, text);
  etch_rune : (EtchingArgs) -> (text, text);
  generate_and_verify_schnorr : () -> (Result);
  get_adddress_balance : (text) -> (nat64);
  get_btc_balance : () -> (nat64);
  get_deposit_address_for_bitcoin : () -> (text);
  get_deposit_address_for_ckbtc : () -> (text) query;
  get_estimated_cbktc_conversion_fee : () -> (nat64) composite_query;
  get_utxos : () -> (vec Utxo);
  mint_runes : (MintArgs) -> (text);
  public_key : () -> (Result_1);
  query_conversion_status : (nat64) -> (text) composite_query;
  sign : (text) -> (Result_2);
  verify_schnorr_signature : (text, text, text) -> (Result);
}
